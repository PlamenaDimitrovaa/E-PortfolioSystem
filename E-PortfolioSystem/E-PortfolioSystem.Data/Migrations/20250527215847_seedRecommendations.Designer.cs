// <auto-generated />
using System;
using E_PortfolioSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_PortfolioSystem.Data.Migrations
{
    [DbContext(typeof(EPortfolioDbContext))]
    [Migration("20250527215847_seedRecommendations")]
    partial class seedRecommendations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.AttachedDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileContent")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FileLocation")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AttachedDocuments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("60e7e4d1-7d77-4d3d-9792-bd02dcad8ef1"),
                            Description = "Сертификат за Основи на C#",
                            DocumentType = "PDF",
                            FileContent = "base64stringcontent1",
                            FileLocation = "/files/student1/certificate1.pdf",
                            FileName = "Certificate_Student1.pdf",
                            UploadDate = new DateTime(2023, 3, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("f3f2163a-24cb-43d0-a3e5-c0c34c18cc2c"),
                            Description = "Сертификат за Java Advanced",
                            DocumentType = "DOCX",
                            FileContent = "base64stringcontent2",
                            FileLocation = "/files/student2/certificate2.docx",
                            FileName = "Certificate_Student2.docx",
                            UploadDate = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("9df4d32b-76d2-4c7f-8e42-ec4f7baf34cb"),
                            Description = "Сертификат за уеб програмиране",
                            DocumentType = "PDF",
                            FileContent = "base64stringcontent3",
                            FileLocation = "/files/student3/certificate3.pdf",
                            FileName = "Certificate_Student3.pdf",
                            UploadDate = new DateTime(2023, 9, 10, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("bebf91e9-90aa-4b65-b0ff-1fa91f4c83e4"),
                            Description = "Сертификат за Python",
                            DocumentType = "PDF",
                            FileContent = "base64stringcontent4",
                            FileLocation = "/files/student4/certificate4.pdf",
                            FileName = "Certificate_Student4.pdf",
                            UploadDate = new DateTime(2023, 12, 5, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("d42e5cf4-e694-42e8-b388-34e529f383ab"),
                            Description = "Сертификат за SQL",
                            DocumentType = "PDF",
                            FileContent = "base64stringcontent5",
                            FileLocation = "/files/student5/certificate5.pdf",
                            FileName = "Certificate_Student5.pdf",
                            UploadDate = new DateTime(2024, 2, 18, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Certificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttachedDocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FilePath")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("IssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AttachedDocumentId");

                    b.HasIndex("StudentId");

                    b.ToTable("Certificates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0d6d83d-54b7-4fd9-bbe2-d46014a148af"),
                            AttachedDocumentId = new Guid("60e7e4d1-7d77-4d3d-9792-bd02dcad8ef1"),
                            FilePath = "https://img.freepik.com/free-psd/elegant-certificate-template-with-golden-details_69286-460.jpg",
                            IssuedDate = new DateTime(2023, 6, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Issuer = "Microsoft",
                            StudentId = new Guid("5cfa1d36-7ae6-4c95-b3a4-e5a96b14b591"),
                            Title = "Основи на C#"
                        },
                        new
                        {
                            Id = new Guid("19a5d055-1714-456a-aee7-e1fd195aeb2d"),
                            AttachedDocumentId = new Guid("9df4d32b-76d2-4c7f-8e42-ec4f7baf34cb"),
                            FilePath = "https://img.freepik.com/free-psd/sign-that-says-certificate-approval-approval-it_69286-538.jpg",
                            IssuedDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Issuer = "Udemy",
                            StudentId = new Guid("7f3cd066-6f98-43e2-bff1-17972e62f202"),
                            Title = "ASP.NET Core Уеб програмиране"
                        },
                        new
                        {
                            Id = new Guid("d2077f92-22dc-4065-a318-7cb9a3ec59e0"),
                            AttachedDocumentId = new Guid("f3f2163a-24cb-43d0-a3e5-c0c34c18cc2c"),
                            FilePath = "https://img.freepik.com/free-vector/geometric-minimalist-business-certificates_23-2148896559.jpg",
                            IssuedDate = new DateTime(2022, 11, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Issuer = "freeCodeCamp",
                            StudentId = new Guid("cb3c4c29-7a2b-4c98-91de-57b28f35b920"),
                            Title = "JavaScript напреднал"
                        },
                        new
                        {
                            Id = new Guid("2cf9b2e4-b22f-4639-9d6b-631d97a37d3f"),
                            AttachedDocumentId = new Guid("d42e5cf4-e694-42e8-b388-34e529f383ab"),
                            FilePath = "https://img.freepik.com/free-vector/abstract-colorful-design-certificates_23-2148886971.jpg",
                            IssuedDate = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Issuer = "Oracle",
                            StudentId = new Guid("b61b3a88-78d9-4044-a166-2b8754ec255e"),
                            Title = "Системи базиданни"
                        },
                        new
                        {
                            Id = new Guid("e9578f87-d5b2-4c0a-b676-1ff7e7cdba3d"),
                            AttachedDocumentId = new Guid("bebf91e9-90aa-4b65-b0ff-1fa91f4c83e4"),
                            FilePath = "https://img.freepik.com/premium-vector/certificate_733271-100.jpg",
                            IssuedDate = new DateTime(2024, 3, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            Issuer = "Coursera",
                            StudentId = new Guid("edb4d7d9-014b-4b2d-8124-6a5cd45f0b67"),
                            Title = "Основи на Machine Learning"
                        });
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Education", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Faculty")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d74b56a7-f444-42ed-b5d5-f5c416d5a80f"),
                            Degree = "Бакалавър",
                            EndDate = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Faculty = "Факултет по компютърни науки",
                            Institution = "Технически университет - София",
                            Specialty = "Компютърни системи и технологии",
                            StartDate = new DateTime(2021, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = new Guid("5cfa1d36-7ae6-4c95-b3a4-e5a96b14b591")
                        },
                        new
                        {
                            Id = new Guid("9eabfcee-2f79-4b8e-9537-92e7c655b9c7"),
                            Degree = "Бакалавър",
                            EndDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Faculty = "Факултет по математика и информатика",
                            Institution = "Софийски университет",
                            Specialty = "Софтуерно инженерство",
                            StartDate = new DateTime(2020, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = new Guid("7f3cd066-6f98-43e2-bff1-17972e62f202")
                        },
                        new
                        {
                            Id = new Guid("1e527d02-9797-4e9f-8bfc-b62412754427"),
                            Degree = "Бакалавър",
                            EndDate = new DateTime(2026, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Faculty = "Департамент по информатика",
                            Institution = "Нов български университет",
                            Specialty = "Информационни технологии",
                            StartDate = new DateTime(2022, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = new Guid("cb3c4c29-7a2b-4c98-91de-57b28f35b920")
                        },
                        new
                        {
                            Id = new Guid("712de13f-8c38-4dd5-aac0-82c10b3f3a21"),
                            Degree = "Бакалавър",
                            EndDate = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Faculty = "Факултет по автоматизация и изчислителна техника",
                            Institution = "Технически университет - Варна",
                            Specialty = "Автоматизация, информационна и управляваща техника",
                            StartDate = new DateTime(2021, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = new Guid("b61b3a88-78d9-4044-a166-2b8754ec255e")
                        },
                        new
                        {
                            Id = new Guid("347aeb9f-b7d3-4b84-ae50-ea154d94b1cb"),
                            Degree = "Бакалавър",
                            EndDate = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Faculty = "Факултет по математика и информатика",
                            Institution = "Пловдивски университет",
                            Specialty = "Приложна компютърна лингвистика",
                            StartDate = new DateTime(2020, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentId = new Guid("edb4d7d9-014b-4b2d-8124-6a5cd45f0b67")
                        });
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Email", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("ToUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Evaluation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EvaluationType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProjectGrade")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SubjectGrade")
                        .HasColumnType("int");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Evaluations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("777c1952-01ed-4cce-88c0-6b2a0610d351"),
                            CreatedAt = new DateTime(2024, 6, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            EvaluationType = "Финална",
                            Feedback = "Отлична имплементация на концепции от Изкуствения интелект с изчистен потребителски интерфейс.",
                            ProjectGrade = 5,
                            ProjectId = new Guid("122bf74b-69b4-4b2b-81b3-f203cd889a11"),
                            SubjectGrade = 6,
                            SubjectId = new Guid("ec6942eb-7f50-4f4b-8011-891c5051eb32"),
                            TeacherId = new Guid("99f1710c-97b3-4bd3-8171-e0dc986d313d")
                        },
                        new
                        {
                            Id = new Guid("6ad69f6e-7c4c-4a5b-aeb6-bb43d193bce5"),
                            CreatedAt = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            EvaluationType = "Финална",
                            Feedback = "Добре структурирано и с изчистен код",
                            ProjectGrade = 5,
                            ProjectId = new Guid("2f5b887d-3c46-45e1-b826-3dbbe8570dd8"),
                            SubjectGrade = 5,
                            SubjectId = new Guid("31bc0e6b-4f14-4212-b67e-9b61f3e58f73"),
                            TeacherId = new Guid("be0087cd-b86f-47b0-bde4-1632f8fd632e")
                        },
                        new
                        {
                            Id = new Guid("f9d41ad3-6f3e-4861-82de-d0a0df68b798"),
                            CreatedAt = new DateTime(2024, 7, 30, 0, 0, 0, 0, DateTimeKind.Utc),
                            EvaluationType = "Защита",
                            Feedback = "Красив потребителски интерфейс, логически грешки, трябва да се поработи върху идеята.",
                            ProjectGrade = 4,
                            ProjectId = new Guid("1c83cafd-c4f7-4eb1-809c-2703df8c29c5"),
                            SubjectGrade = 6,
                            SubjectId = new Guid("8e3c0f29-c432-45c9-9e32-7a7a1df28523"),
                            TeacherId = new Guid("c7f6b928-bbd3-4ae9-bad5-91e417b59a98")
                        },
                        new
                        {
                            Id = new Guid("8f74e0e4-3b4a-496a-a6d7-219d0108fc34"),
                            CreatedAt = new DateTime(2024, 8, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            EvaluationType = "Защита",
                            Feedback = "Креативна идея, трябват подобрения в UX.",
                            ProjectGrade = 5,
                            ProjectId = new Guid("c2e6dffd-19d4-4b80-bf3b-d5a69fae59b0"),
                            SubjectGrade = 4,
                            SubjectId = new Guid("7f489f70-911e-40a4-8b79-1d6c3315c8cb"),
                            TeacherId = new Guid("b34045a7-94f6-4e32-a7e7-f36eb9a387e3")
                        },
                        new
                        {
                            Id = new Guid("c025b27d-74a4-419f-b61f-64f7ab94a0b5"),
                            CreatedAt = new DateTime(2024, 9, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            EvaluationType = "Финална",
                            Feedback = "Прекрасна работа!",
                            ProjectGrade = 6,
                            ProjectId = new Guid("b79cb4a7-0ab0-4a7c-b86a-8b35c46a74fd"),
                            SubjectGrade = 6,
                            SubjectId = new Guid("c4c2079d-1ed1-4f5f-8e36-4b03cc6e71da"),
                            TeacherId = new Guid("abdcf0bb-76b4-4a4d-a369-e2de9a6d4d65")
                        });
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.HRContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("HRUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HRUserId");

                    b.HasIndex("StudentUserId");

                    b.ToTable("HRContacts");
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1f7896e-a28c-4c8c-baf8-037c3b08ac91"),
                            Content = "Добре дошъл в системата за електронно портфолио!",
                            CreatedAt = new DateTime(2024, 5, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            IsRead = false,
                            Title = "Добре дошъл!",
                            UserId = new Guid("a1d7b600-4459-4f80-92d0-1b3e9f3b7234")
                        },
                        new
                        {
                            Id = new Guid("e2a403f3-f8fc-4657-bf5f-bf9838e31d87"),
                            Content = "Успешно добави своя първи проект.",
                            CreatedAt = new DateTime(2024, 5, 2, 11, 30, 0, 0, DateTimeKind.Utc),
                            IsRead = false,
                            Title = "Добавен проект",
                            UserId = new Guid("b4e0dcf9-b1cb-45a1-93d6-d0dbb130f128")
                        },
                        new
                        {
                            Id = new Guid("1bff2e77-9dc3-4930-b49e-2ff8d645a00f"),
                            Content = "Имаш нова оценка по курс.",
                            CreatedAt = new DateTime(2024, 5, 3, 14, 15, 0, 0, DateTimeKind.Utc),
                            IsRead = false,
                            Title = "Нова оценка",
                            UserId = new Guid("5c9225c4-f837-4e1e-8f33-b2c13b184951")
                        },
                        new
                        {
                            Id = new Guid("6a6179c6-8934-4ee0-a79f-df0887601f24"),
                            Content = "Получена е обратна връзка по твой проект.",
                            CreatedAt = new DateTime(2024, 5, 4, 9, 45, 0, 0, DateTimeKind.Utc),
                            IsRead = true,
                            Title = "Обратна връзка",
                            UserId = new Guid("ed49c00b-2026-41e0-a97c-9f4f7e74cb79")
                        },
                        new
                        {
                            Id = new Guid("a95e2b8f-8d9f-45de-87b1-bce51c53d5d1"),
                            Content = "Успешно качи нов документ.",
                            CreatedAt = new DateTime(2024, 5, 5, 16, 0, 0, 0, DateTimeKind.Utc),
                            IsRead = false,
                            Title = "Качен документ",
                            UserId = new Guid("7f25fd3e-1719-43a5-8fbe-bad7f62be7a6")
                        },
                        new
                        {
                            Id = new Guid("d9e9f616-b276-48e3-8ff9-9648a649b282"),
                            Content = "Нов студент се е регистрирал.",
                            CreatedAt = new DateTime(2024, 5, 6, 8, 20, 0, 0, DateTimeKind.Utc),
                            IsRead = false,
                            Title = "Нов студент",
                            UserId = new Guid("61ba8c0d-1c34-4b68-8881-218f70632a09")
                        },
                        new
                        {
                            Id = new Guid("7902f7de-b6a3-4d94-acc4-7d03cda13361"),
                            Content = "Имате нов проект за преглед.",
                            CreatedAt = new DateTime(2024, 5, 7, 13, 10, 0, 0, DateTimeKind.Utc),
                            IsRead = false,
                            Title = "Проект за преглед",
                            UserId = new Guid("13c96c70-f547-41f3-91e6-84b38e92e994")
                        },
                        new
                        {
                            Id = new Guid("e83df197-33b6-441f-b9c3-3b7c7c1a0173"),
                            Content = "Студент е качил нов документ.",
                            CreatedAt = new DateTime(2024, 5, 8, 15, 40, 0, 0, DateTimeKind.Utc),
                            IsRead = false,
                            Title = "Документ от студент",
                            UserId = new Guid("dcbcf227-4302-4743-8c99-e216bc1a6aef")
                        },
                        new
                        {
                            Id = new Guid("bb78d857-0179-4e5a-bf7c-06b5a40a7ff0"),
                            Content = "Успешно изпрати обратна връзка на студент.",
                            CreatedAt = new DateTime(2024, 5, 9, 10, 5, 0, 0, DateTimeKind.Utc),
                            IsRead = true,
                            Title = "Обратна връзка изпратена",
                            UserId = new Guid("94b8a56e-4a0f-4f39-8e83-1ad38c207d30")
                        },
                        new
                        {
                            Id = new Guid("95c8c566-3dc3-41dc-a73e-172a564be502"),
                            Content = "Завърши оценка по проект.",
                            CreatedAt = new DateTime(2024, 5, 10, 12, 30, 0, 0, DateTimeKind.Utc),
                            IsRead = false,
                            Title = "Оценка завършена",
                            UserId = new Guid("9cb5e4e7-8a6d-4f35-b3a2-973e1ec764f5")
                        });
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1a1a935-4e1e-421f-bfc3-d97843f34ea1"),
                            Bio = "Интересува се от изкуствен интелект",
                            FullName = "Иван Петров",
                            ImageUrl = "https://img.freepik.com/free-photo/close-up-smiling-boy-with-sportswear-dawn_23-2147562116.jpg",
                            IsPublic = true,
                            Location = "София, България",
                            Phone = "+359881234561",
                            UserId = new Guid("a1d7b600-4459-4f80-92d0-1b3e9f3b7234")
                        },
                        new
                        {
                            Id = new Guid("f4e8b0d2-d3b9-4a35-89f9-f661ea768112"),
                            Bio = "Уеб програмист, интересува се от разработка на онлайн магазини.",
                            FullName = "Мария Георгиева",
                            ImageUrl = "https://img.freepik.com/free-photo/pretty-girl-with-nice-smile_23-2147611501.jpg",
                            IsPublic = true,
                            Location = "Пловдив, България",
                            Phone = "+359881234562",
                            UserId = new Guid("b4e0dcf9-b1cb-45a1-93d6-d0dbb130f128")
                        },
                        new
                        {
                            Id = new Guid("8dbdcf2c-d43e-43df-9682-5de5975eeb83"),
                            Bio = "UX ентусиаст с любов към дизайна.",
                            FullName = "Николай Стоянов",
                            ImageUrl = "https://img.freepik.com/free-photo/portrait-smiling-young-man_1268-21877.jpg",
                            IsPublic = false,
                            Location = "Варна, България",
                            Phone = "+359881234563",
                            UserId = new Guid("5c9225c4-f837-4e1e-8f33-b2c13b184951")
                        },
                        new
                        {
                            Id = new Guid("fe419a14-e74e-4c6b-930e-dbd2b514f49a"),
                            Bio = "Креативна, с интерест към технологии и изкуство.",
                            FullName = "Елена Димитрова",
                            ImageUrl = "https://img.freepik.com/free-psd/close-up-kid-expression-portrait_23-2150193262.jpg",
                            IsPublic = true,
                            Location = "Бургас, България",
                            Phone = "+359881234564",
                            UserId = new Guid("ed49c00b-2026-41e0-a97c-9f4f7e74cb79")
                        },
                        new
                        {
                            Id = new Guid("d4dfb944-f91c-4e94-83ad-41df2a9bb9c7"),
                            Bio = "Интересува се от оптимизация и алгоритми.",
                            FullName = "Георги Колев",
                            ImageUrl = "https://img.freepik.com/free-photo/front-view-man-posing_23-2148364843.jpg",
                            IsPublic = false,
                            Location = "Русе, България",
                            Phone = "+359881234565",
                            UserId = new Guid("7f25fd3e-1719-43a5-8fbe-bad7f62be7a6")
                        },
                        new
                        {
                            Id = new Guid("8f1c86f5-169b-4dc1-9bd3-dbe7b4b3d7e5"),
                            Bio = "Преподавател по бази данни и SQL оптимизация.",
                            FullName = "Доц. д-р Анна Иванова",
                            ImageUrl = "https://img.freepik.com/free-photo/business-woman-smiling_23-2148152017.jpg",
                            IsPublic = true,
                            Location = "София, България",
                            Phone = "+359888112201",
                            UserId = new Guid("61ba8c0d-1c34-4b68-8881-218f70632a09")
                        },
                        new
                        {
                            Id = new Guid("20ed78c4-2599-4b1a-b70d-ea5ae9c2e4f0"),
                            Bio = "Специалист по изкуствен интелект и машинно обучение.",
                            FullName = "Проф. д-р Николай Костов",
                            ImageUrl = "https://img.freepik.com/free-photo/portrait-smiling-handsome-man_23-2149022623.jpg",
                            IsPublic = true,
                            Location = "Пловдив, България",
                            Phone = "+359888112202",
                            UserId = new Guid("13c96c70-f547-41f3-91e6-84b38e92e994")
                        },
                        new
                        {
                            Id = new Guid("54b6c9cc-3f49-45fd-b372-e473202f1245"),
                            Bio = "Интересува се от уеб технологии и преподаване на HTML/CSS.",
                            FullName = "Гл. ас. Мария Николова",
                            ImageUrl = "https://img.freepik.com/free-photo/beautiful-woman-smiling-outdoors_23-2148733309.jpg",
                            IsPublic = false,
                            Location = "Варна, България",
                            Phone = "+359888112203",
                            UserId = new Guid("dcbcf227-4302-4743-8c99-e216bc1a6aef")
                        },
                        new
                        {
                            Id = new Guid("933fd617-3243-4c91-b8c3-4a04041be3f9"),
                            Bio = "Преподава компютърни мрежи и сигурност в интернет.",
                            FullName = "Доц. д-р Стефан Георгиев",
                            ImageUrl = "https://img.freepik.com/free-photo/happy-man-holding-tablet_23-2149370873.jpg",
                            IsPublic = true,
                            Location = "Русе, България",
                            Phone = "+359888112204",
                            UserId = new Guid("94b8a56e-4a0f-4f39-8e83-1ad38c207d30")
                        },
                        new
                        {
                            Id = new Guid("d0fa45c9-70ed-4eb2-9725-c8d962cd91a2"),
                            Bio = "Млад преподавател с интереси в областта на Java и C#.",
                            FullName = "Ас. Георги Христов",
                            ImageUrl = "https://img.freepik.com/free-photo/portrait-young-man_23-2148401316.jpg",
                            IsPublic = false,
                            Location = "Благоевград, България",
                            Phone = "+359888112205",
                            UserId = new Guid("9cb5e4e7-8a6d-4f35-b3a2-973e1ec764f5")
                        });
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AttachedDocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("EvaluationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FilePath")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AttachedDocumentId")
                        .IsUnique()
                        .HasFilter("[AttachedDocumentId] IS NOT NULL");

                    b.HasIndex("EvaluationId")
                        .IsUnique()
                        .HasFilter("[EvaluationId] IS NOT NULL");

                    b.HasIndex("StudentId");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("122bf74b-69b4-4b2b-81b3-f203cd889a11"),
                            AttachedDocumentId = new Guid("60e7e4d1-7d77-4d3d-9792-bd02dcad8ef1"),
                            CreatedAt = new DateTime(2025, 1, 1, 9, 0, 0, 0, DateTimeKind.Utc),
                            Deadline = new DateTime(2025, 12, 31, 23, 59, 59, 0, DateTimeKind.Utc),
                            Description = "Чатбот, който помага на потребителите с автоматизирани отговори с помощта на AI.",
                            EvaluationId = new Guid("777c1952-01ed-4cce-88c0-6b2a0610d351"),
                            FilePath = "/projects/student1/chatbot.zip",
                            ImageUrl = "https://mma.prnewswire.com/media/2218114/Screenshots_AI_Chat.jpg",
                            IsApproved = true,
                            Link = "https://github.com/student1/ai-chatbot",
                            Title = "AI Чатбот асистент",
                            UserId = new Guid("b4e0dcf9-b1cb-45a1-93d6-d0dbb130f128")
                        },
                        new
                        {
                            Id = new Guid("2f5b887d-3c46-45e1-b826-3dbbe8570dd8"),
                            AttachedDocumentId = new Guid("f3f2163a-24cb-43d0-a3e5-c0c34c18cc2c"),
                            CreatedAt = new DateTime(2025, 2, 1, 10, 30, 0, 0, DateTimeKind.Utc),
                            Deadline = new DateTime(2025, 11, 30, 18, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Базиран на ASP.NET уеб магазин с потребителска регистрация и количка.",
                            EvaluationId = new Guid("6ad69f6e-7c4c-4a5b-aeb6-bb43d193bce5"),
                            FilePath = "/projects/student2/ecommerce.zip",
                            ImageUrl = "https://techvify-software.com/wp-content/uploads/2023/08/5-best-free-ecommerce-flatform.png",
                            IsApproved = true,
                            Link = "https://student2-shop.example.com",
                            Title = "Платформа за онлайн търговия",
                            UserId = new Guid("ed49c00b-2026-41e0-a97c-9f4f7e74cb79")
                        },
                        new
                        {
                            Id = new Guid("1c83cafd-c4f7-4eb1-809c-2703df8c29c5"),
                            AttachedDocumentId = new Guid("9df4d32b-76d2-4c7f-8e42-ec4f7baf34cb"),
                            CreatedAt = new DateTime(2025, 3, 1, 14, 0, 0, 0, DateTimeKind.Utc),
                            Deadline = new DateTime(2025, 10, 15, 20, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Лично портфолио, създадено с React и Tailwind CSS.",
                            EvaluationId = new Guid("f9d41ad3-6f3e-4861-82de-d0a0df68b798"),
                            FilePath = "/projects/student3/portfolio.zip",
                            ImageUrl = "https://i.ytimg.com/vi/Dtb3DdSvYRY/maxresdefault.jpg",
                            IsApproved = false,
                            Link = "https://student3.dev",
                            Title = "Уебсайт за портфолио",
                            UserId = new Guid("5c9225c4-f837-4e1e-8f33-b2c13b184951")
                        },
                        new
                        {
                            Id = new Guid("c2e6dffd-19d4-4b80-bf3b-d5a69fae59b0"),
                            AttachedDocumentId = new Guid("bebf91e9-90aa-4b65-b0ff-1fa91f4c83e4"),
                            CreatedAt = new DateTime(2025, 4, 1, 8, 0, 0, 0, DateTimeKind.Utc),
                            Deadline = new DateTime(2025, 12, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Приложение за Android, което проследява навиците на потребителите.",
                            EvaluationId = new Guid("8f74e0e4-3b4a-496a-a6d7-219d0108fc34"),
                            FilePath = "/projects/student4/tracker.apk",
                            ImageUrl = "https://images.ctfassets.net/jicu8fwm4fvs/49r9KDrN6wNy5S8a1XJOZZ/e69da8fb1fd10239c8a85e016400809b/16-mobile-tracker-thumbnail.png",
                            IsApproved = true,
                            Link = "https://play.google.com/store/apps/details?id=tracker.student4",
                            Title = "Проследяване на мобилни приложения",
                            UserId = new Guid("7f25fd3e-1719-43a5-8fbe-bad7f62be7a6")
                        },
                        new
                        {
                            Id = new Guid("b79cb4a7-0ab0-4a7c-b86a-8b35c46a74fd"),
                            AttachedDocumentId = new Guid("d42e5cf4-e694-42e8-b388-34e529f383ab"),
                            CreatedAt = new DateTime(2025, 4, 15, 16, 0, 0, 0, DateTimeKind.Utc),
                            Deadline = new DateTime(2025, 11, 15, 15, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Инструмент, който анализира и подобрява производителността на SQL.",
                            EvaluationId = new Guid("c025b27d-74a4-419f-b61f-64f7ab94a0b5"),
                            FilePath = "/projects/student5/sqloptimizer.zip",
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTgrwj1FJlzRTO3h10-jZWPm3fsoGwvstz7QA&s",
                            IsApproved = false,
                            Link = "https://student5-sqlopt.example.com",
                            Title = "Оптимизатор на SQL заявки",
                            UserId = new Guid("a1d7b600-4459-4f80-92d0-1b3e9f3b7234")
                        });
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Recommendation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("ToUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("Recommendations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0c502be-1144-4042-b607-06c3b8d527ff"),
                            CreatedAt = new DateTime(2024, 5, 17, 16, 0, 0, 0, DateTimeKind.Utc),
                            FromUserId = new Guid("61ba8c0d-1c34-4b68-8881-218f70632a09"),
                            Text = "Иван демонстрира изключителни умения за анализ на данни и работа в екип.",
                            ToUserId = new Guid("a1d7b600-4459-4f80-92d0-1b3e9f3b7234")
                        },
                        new
                        {
                            Id = new Guid("22939c60-f1ef-41aa-9c92-c74cd440a0e0"),
                            CreatedAt = new DateTime(2024, 5, 20, 10, 30, 0, 0, DateTimeKind.Utc),
                            FromUserId = new Guid("94b8a56e-4a0f-4f39-8e83-1ad38c207d30"),
                            Text = "Мария има силно портфолио и отлични комуникационни умения.",
                            ToUserId = new Guid("b4e0dcf9-b1cb-45a1-93d6-d0dbb130f128")
                        },
                        new
                        {
                            Id = new Guid("31c0a993-4307-46ef-a057-24ae70990c96"),
                            CreatedAt = new DateTime(2024, 5, 24, 14, 0, 0, 0, DateTimeKind.Utc),
                            FromUserId = new Guid("94b8a56e-4a0f-4f39-8e83-1ad38c207d30"),
                            Text = "Дизайнерското мислене и UI/UX уменията на Елена са впечатляващи.",
                            ToUserId = new Guid("ed49c00b-2026-41e0-a97c-9f4f7e74cb79")
                        },
                        new
                        {
                            Id = new Guid("9fd67d3a-2b35-472e-bfac-46ffec0e65bc"),
                            CreatedAt = new DateTime(2024, 5, 22, 11, 0, 0, 0, DateTimeKind.Utc),
                            FromUserId = new Guid("9cb5e4e7-8a6d-4f35-b3a2-973e1ec764f5"),
                            Text = "Николай показа дълбоко разбиране на принципите на UX дизайна.",
                            ToUserId = new Guid("5c9225c4-f837-4e1e-8f33-b2c13b184951")
                        },
                        new
                        {
                            Id = new Guid("d1604d93-dcfd-4460-9426-c92a86bbf683"),
                            CreatedAt = new DateTime(2024, 5, 25, 9, 0, 0, 0, DateTimeKind.Utc),
                            FromUserId = new Guid("9cb5e4e7-8a6d-4f35-b3a2-973e1ec764f5"),
                            Text = "Георги е силно аналитичен и ориентиран към детайлите.",
                            ToUserId = new Guid("7f25fd3e-1719-43a5-8fbe-bad7f62be7a6")
                        });
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a991cc1-f84e-466e-9962-70c50c634b76"),
                            Level = "Напреднал",
                            SkillName = "C# Програмиране"
                        },
                        new
                        {
                            Id = new Guid("c5b02d8e-b0fc-4a54-9b5f-8d0e9e8b84c4"),
                            Level = "Междинен",
                            SkillName = "SQL"
                        },
                        new
                        {
                            Id = new Guid("54cc88d3-f8a4-4716-bd3b-b92c915e3df6"),
                            Level = "Напреднал",
                            SkillName = "HTML & CSS"
                        },
                        new
                        {
                            Id = new Guid("4ff51c1f-90a4-41de-b165-001de306d93e"),
                            Level = "Междинен",
                            SkillName = "JavaScript"
                        },
                        new
                        {
                            Id = new Guid("fc5f0c0f-8e12-4c8d-b6d4-f0ad5a0fa61a"),
                            Level = "Начинаещ",
                            SkillName = "ASP.NET Core"
                        });
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FacultyNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5cfa1d36-7ae6-4c95-b3a4-e5a96b14b591"),
                            FacultyNumber = "FN2023001",
                            IsActive = true,
                            UserId = new Guid("a1d7b600-4459-4f80-92d0-1b3e9f3b7234")
                        },
                        new
                        {
                            Id = new Guid("7f3cd066-6f98-43e2-bff1-17972e62f202"),
                            FacultyNumber = "FN2023002",
                            IsActive = true,
                            UserId = new Guid("b4e0dcf9-b1cb-45a1-93d6-d0dbb130f128")
                        },
                        new
                        {
                            Id = new Guid("cb3c4c29-7a2b-4c98-91de-57b28f35b920"),
                            FacultyNumber = "FN2023003",
                            IsActive = true,
                            UserId = new Guid("5c9225c4-f837-4e1e-8f33-b2c13b184951")
                        },
                        new
                        {
                            Id = new Guid("b61b3a88-78d9-4044-a166-2b8754ec255e"),
                            FacultyNumber = "FN2023004",
                            IsActive = true,
                            UserId = new Guid("ed49c00b-2026-41e0-a97c-9f4f7e74cb79")
                        },
                        new
                        {
                            Id = new Guid("edb4d7d9-014b-4b2d-8124-6a5cd45f0b67"),
                            FacultyNumber = "FN2023005",
                            IsActive = true,
                            UserId = new Guid("7f25fd3e-1719-43a5-8fbe-bad7f62be7a6")
                        });
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.StudentSkill", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("StudentsSkills");

                    b.HasData(
                        new
                        {
                            StudentId = new Guid("5cfa1d36-7ae6-4c95-b3a4-e5a96b14b591"),
                            SkillId = new Guid("3a991cc1-f84e-466e-9962-70c50c634b76")
                        },
                        new
                        {
                            StudentId = new Guid("edb4d7d9-014b-4b2d-8124-6a5cd45f0b67"),
                            SkillId = new Guid("c5b02d8e-b0fc-4a54-9b5f-8d0e9e8b84c4")
                        },
                        new
                        {
                            StudentId = new Guid("cb3c4c29-7a2b-4c98-91de-57b28f35b920"),
                            SkillId = new Guid("54cc88d3-f8a4-4716-bd3b-b92c915e3df6")
                        },
                        new
                        {
                            StudentId = new Guid("b61b3a88-78d9-4044-a166-2b8754ec255e"),
                            SkillId = new Guid("4ff51c1f-90a4-41de-b165-001de306d93e")
                        },
                        new
                        {
                            StudentId = new Guid("7f3cd066-6f98-43e2-bff1-17972e62f202"),
                            SkillId = new Guid("3a991cc1-f84e-466e-9962-70c50c634b76")
                        },
                        new
                        {
                            StudentId = new Guid("7f3cd066-6f98-43e2-bff1-17972e62f202"),
                            SkillId = new Guid("fc5f0c0f-8e12-4c8d-b6d4-f0ad5a0fa61a")
                        },
                        new
                        {
                            StudentId = new Guid("b61b3a88-78d9-4044-a166-2b8754ec255e"),
                            SkillId = new Guid("c5b02d8e-b0fc-4a54-9b5f-8d0e9e8b84c4")
                        },
                        new
                        {
                            StudentId = new Guid("b61b3a88-78d9-4044-a166-2b8754ec255e"),
                            SkillId = new Guid("54cc88d3-f8a4-4716-bd3b-b92c915e3df6")
                        },
                        new
                        {
                            StudentId = new Guid("5cfa1d36-7ae6-4c95-b3a4-e5a96b14b591"),
                            SkillId = new Guid("4ff51c1f-90a4-41de-b165-001de306d93e")
                        },
                        new
                        {
                            StudentId = new Guid("5cfa1d36-7ae6-4c95-b3a4-e5a96b14b591"),
                            SkillId = new Guid("fc5f0c0f-8e12-4c8d-b6d4-f0ad5a0fa61a")
                        });
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.StudentSubject", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EnrolledOn")
                        .HasColumnType("datetime2");

                    b.HasKey("StudentId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("StudentsSubjects");

                    b.HasData(
                        new
                        {
                            StudentId = new Guid("5cfa1d36-7ae6-4c95-b3a4-e5a96b14b591"),
                            SubjectId = new Guid("ec6942eb-7f50-4f4b-8011-891c5051eb32"),
                            EnrolledOn = new DateTime(2024, 9, 15, 8, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            StudentId = new Guid("7f3cd066-6f98-43e2-bff1-17972e62f202"),
                            SubjectId = new Guid("31bc0e6b-4f14-4212-b67e-9b61f3e58f73"),
                            EnrolledOn = new DateTime(2024, 9, 16, 9, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            StudentId = new Guid("cb3c4c29-7a2b-4c98-91de-57b28f35b920"),
                            SubjectId = new Guid("8e3c0f29-c432-45c9-9e32-7a7a1df28523"),
                            EnrolledOn = new DateTime(2024, 9, 17, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            StudentId = new Guid("b61b3a88-78d9-4044-a166-2b8754ec255e"),
                            SubjectId = new Guid("7f489f70-911e-40a4-8b79-1d6c3315c8cb"),
                            EnrolledOn = new DateTime(2024, 9, 18, 11, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            StudentId = new Guid("edb4d7d9-014b-4b2d-8124-6a5cd45f0b67"),
                            SubjectId = new Guid("c4c2079d-1ed1-4f5f-8e36-4b03cc6e71da"),
                            EnrolledOn = new DateTime(2024, 9, 19, 12, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EvaluationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAdmitted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationId")
                        .IsUnique()
                        .HasFilter("[EvaluationId] IS NOT NULL");

                    b.HasIndex("ProjectId")
                        .IsUnique()
                        .HasFilter("[ProjectId] IS NOT NULL");

                    b.HasIndex("TeacherId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec6942eb-7f50-4f4b-8011-891c5051eb32"),
                            EvaluationId = new Guid("777c1952-01ed-4cce-88c0-6b2a0610d351"),
                            IsAdmitted = true,
                            Name = "Изкуствен интелект",
                            ProjectId = new Guid("122bf74b-69b4-4b2b-81b3-f203cd889a11"),
                            TeacherId = new Guid("99f1710c-97b3-4bd3-8171-e0dc986d313d")
                        },
                        new
                        {
                            Id = new Guid("31bc0e6b-4f14-4212-b67e-9b61f3e58f73"),
                            EvaluationId = new Guid("6ad69f6e-7c4c-4a5b-aeb6-bb43d193bce5"),
                            IsAdmitted = true,
                            Name = "Системи за онлайн търговия",
                            ProjectId = new Guid("2f5b887d-3c46-45e1-b826-3dbbe8570dd8"),
                            TeacherId = new Guid("be0087cd-b86f-47b0-bde4-1632f8fd632e")
                        },
                        new
                        {
                            Id = new Guid("8e3c0f29-c432-45c9-9e32-7a7a1df28523"),
                            EvaluationId = new Guid("f9d41ad3-6f3e-4861-82de-d0a0df68b798"),
                            IsAdmitted = true,
                            Name = "Дизайн на потребителския интерфейс",
                            ProjectId = new Guid("1c83cafd-c4f7-4eb1-809c-2703df8c29c5"),
                            TeacherId = new Guid("c7f6b928-bbd3-4ae9-bad5-91e417b59a98")
                        },
                        new
                        {
                            Id = new Guid("7f489f70-911e-40a4-8b79-1d6c3315c8cb"),
                            EvaluationId = new Guid("8f74e0e4-3b4a-496a-a6d7-219d0108fc34"),
                            IsAdmitted = true,
                            Name = "Творчески технологии",
                            ProjectId = new Guid("c2e6dffd-19d4-4b80-bf3b-d5a69fae59b0"),
                            TeacherId = new Guid("b34045a7-94f6-4e32-a7e7-f36eb9a387e3")
                        },
                        new
                        {
                            Id = new Guid("c4c2079d-1ed1-4f5f-8e36-4b03cc6e71da"),
                            EvaluationId = new Guid("c025b27d-74a4-419f-b61f-64f7ab94a0b5"),
                            IsAdmitted = true,
                            Name = "Оптимизация на алгоритми",
                            ProjectId = new Guid("b79cb4a7-0ab0-4a7c-b86a-8b35c46a74fd"),
                            TeacherId = new Guid("abdcf0bb-76b4-4a4d-a369-e2de9a6d4d65")
                        });
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("99f1710c-97b3-4bd3-8171-e0dc986d313d"),
                            UserId = new Guid("61ba8c0d-1c34-4b68-8881-218f70632a09")
                        },
                        new
                        {
                            Id = new Guid("be0087cd-b86f-47b0-bde4-1632f8fd632e"),
                            UserId = new Guid("13c96c70-f547-41f3-91e6-84b38e92e994")
                        },
                        new
                        {
                            Id = new Guid("c7f6b928-bbd3-4ae9-bad5-91e417b59a98"),
                            UserId = new Guid("dcbcf227-4302-4743-8c99-e216bc1a6aef")
                        },
                        new
                        {
                            Id = new Guid("b34045a7-94f6-4e32-a7e7-f36eb9a387e3"),
                            UserId = new Guid("94b8a56e-4a0f-4f39-8e83-1ad38c207d30")
                        },
                        new
                        {
                            Id = new Guid("abdcf0bb-76b4-4a4d-a369-e2de9a6d4d65"),
                            UserId = new Guid("9cb5e4e7-8a6d-4f35-b3a2-973e1ec764f5")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Certificate", b =>
                {
                    b.HasOne("E_PortfolioSystem.Data.Models.AttachedDocument", "AttachedDocument")
                        .WithMany()
                        .HasForeignKey("AttachedDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_PortfolioSystem.Data.Models.Student", "Student")
                        .WithMany("Certificates")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttachedDocument");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Chat", b =>
                {
                    b.HasOne("E_PortfolioSystem.Data.Models.ApplicationUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("E_PortfolioSystem.Data.Models.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Education", b =>
                {
                    b.HasOne("E_PortfolioSystem.Data.Models.Student", "Student")
                        .WithMany("Educations")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Email", b =>
                {
                    b.HasOne("E_PortfolioSystem.Data.Models.ApplicationUser", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("E_PortfolioSystem.Data.Models.ApplicationUser", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Evaluation", b =>
                {
                    b.HasOne("E_PortfolioSystem.Data.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.HRContact", b =>
                {
                    b.HasOne("E_PortfolioSystem.Data.Models.ApplicationUser", "HRUser")
                        .WithMany()
                        .HasForeignKey("HRUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("E_PortfolioSystem.Data.Models.ApplicationUser", "StudentUser")
                        .WithMany()
                        .HasForeignKey("StudentUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HRUser");

                    b.Navigation("StudentUser");
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Notification", b =>
                {
                    b.HasOne("E_PortfolioSystem.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Profile", b =>
                {
                    b.HasOne("E_PortfolioSystem.Data.Models.ApplicationUser", "User")
                        .WithOne()
                        .HasForeignKey("E_PortfolioSystem.Data.Models.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Project", b =>
                {
                    b.HasOne("E_PortfolioSystem.Data.Models.AttachedDocument", "AttachedDocument")
                        .WithOne("Project")
                        .HasForeignKey("E_PortfolioSystem.Data.Models.Project", "AttachedDocumentId");

                    b.HasOne("E_PortfolioSystem.Data.Models.Evaluation", "Evaluation")
                        .WithOne("Project")
                        .HasForeignKey("E_PortfolioSystem.Data.Models.Project", "EvaluationId");

                    b.HasOne("E_PortfolioSystem.Data.Models.Student", null)
                        .WithMany("Projects")
                        .HasForeignKey("StudentId");

                    b.HasOne("E_PortfolioSystem.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttachedDocument");

                    b.Navigation("Evaluation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Recommendation", b =>
                {
                    b.HasOne("E_PortfolioSystem.Data.Models.ApplicationUser", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("E_PortfolioSystem.Data.Models.ApplicationUser", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Student", b =>
                {
                    b.HasOne("E_PortfolioSystem.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.StudentSkill", b =>
                {
                    b.HasOne("E_PortfolioSystem.Data.Models.Skill", "Skill")
                        .WithMany("StudentSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_PortfolioSystem.Data.Models.Student", "Student")
                        .WithMany("StudentSkills")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.StudentSubject", b =>
                {
                    b.HasOne("E_PortfolioSystem.Data.Models.Student", "Student")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_PortfolioSystem.Data.Models.Subject", "Subject")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Subject", b =>
                {
                    b.HasOne("E_PortfolioSystem.Data.Models.Evaluation", "Evaluation")
                        .WithOne("Subject")
                        .HasForeignKey("E_PortfolioSystem.Data.Models.Subject", "EvaluationId");

                    b.HasOne("E_PortfolioSystem.Data.Models.Project", "Project")
                        .WithOne()
                        .HasForeignKey("E_PortfolioSystem.Data.Models.Subject", "ProjectId");

                    b.HasOne("E_PortfolioSystem.Data.Models.Teacher", "Teacher")
                        .WithMany("Subjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Evaluation");

                    b.Navigation("Project");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Teacher", b =>
                {
                    b.HasOne("E_PortfolioSystem.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("E_PortfolioSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("E_PortfolioSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_PortfolioSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("E_PortfolioSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.AttachedDocument", b =>
                {
                    b.Navigation("Project");
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Evaluation", b =>
                {
                    b.Navigation("Project");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Skill", b =>
                {
                    b.Navigation("StudentSkills");
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Student", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("Educations");

                    b.Navigation("Projects");

                    b.Navigation("StudentSkills");

                    b.Navigation("StudentSubjects");
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Subject", b =>
                {
                    b.Navigation("StudentSubjects");
                });

            modelBuilder.Entity("E_PortfolioSystem.Data.Models.Teacher", b =>
                {
                    b.Navigation("Subjects");
                });
#pragma warning restore 612, 618
        }
    }
}
